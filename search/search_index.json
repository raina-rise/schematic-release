{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9879\u76ee\u7b80\u4ecb \u00b6 raina-schematic \u662f\u4e00\u4e2a EDA \u9886\u57df\u4e2d\u8ba1\u7b97 schematic \u5e03\u5c40\u5e03\u7ebf\u7684\u76f8\u5bf9\u6700\u4f18\u89e3\u7684\u5de5\u5177\u3002 \u4e00\u3001\u76ee\u6807\u662f\u4ec0\u4e48 \u00b6 raina-schematic \u7684\u76ee\u6807\u662f\u63a5\u53d7\u4e0d\u5177\u5907\u4f4d\u7f6e\u4fe1\u606f\u7684\u539f\u59cb\u6570\u636e\u540e\uff0c\u6839\u636e\u8fde\u63a5\u5173\u7cfb\uff0c\u751f\u6210\u8db3\u4ee5\u63cf\u8ff0\u51fa\u5982\u4e0b\u89c6\u56fe\u7684\u6570\u636e: \u6307\u6807 \u00b6 \u5224\u65ad\u7a0b\u5e8f\u4f18\u52a3\u7684\u6307\u6807\u4e3b\u8981\u6709 \u8fde\u63a5\u7ebf\u4ea4\u53c9\u6570 \u8fde\u63a5\u7ebf\u62d0\u5f2f\u6570 \u89c6\u89c9\u6548\u679c \u5176\u4e2d1,2\u6761\u53ef\u4ee5\u901a\u8fc7\u7edf\u8ba1\u8fc5\u901f\u8fdb\u884c\u5224\u65ad\uff0c\u7b2c\u4e09\u6761\u6bd4\u8f83\u62bd\u8c61\uff0c\u4f46\u4e1a\u754c\u4e5f\u6709\u76f8\u5173\u7684bp\u53ef\u4ee5\u8fdb\u884c\u53c2\u8003\u3002 \u4e8c\u3001\u6838\u5fc3\u673a\u5236 \u00b6 \u6838\u5fc3\u6570\u636e\u7c7b\u578b \u00b6 \u8282\u70b9\u6a21\u677f NodeProto \u00b6 NodeProto \u662f\u4e00\u4e2a\u865a\u7684\u6982\u5ff5\uff0c\u4f46\u662f\u9700\u8981\u7528\u6237\u8fdb\u884c\u5b9a\u4e49\u3002 raina-schematic \u9700\u8981\u7528\u6237\u5b9a\u4e49\u597d \u8282\u70b9\u6a21\u677f(NodeProto) , \u8282\u70b9(Node) , \u7aef\u53e3(Port) , \u8fde\u63a5\u7ebf(Edge) \u7684\u6570\u636e\uff0c\u7136\u540e\u8f93\u51fa\u7ed9\u7528\u6237\u8db3\u4ee5\u6e32\u67d3\u6210\u4ee5\u4e0b\u56fe\u7247\u7684\u6570\u636e raina-schematic \u652f\u6301\u4f7f\u7528 bin \u6587\u4ef6\uff0c\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u7684\u5f62\u5f0f\u8f93\u5165\u539f\u59cb\u6570\u636e\uff0c\u5e76\u8f93\u51fa json\uff0c\u4e5f\u652f\u6301\u901a\u8fc7\u9759\u6001\u94fe\u63a5\u5e93\u7684\u5f62\u5f0f\uff0c\u5f15\u5165 includes \u548c .a \u6587\u4ef6\uff0c\u5728\u7a0b\u5e8f\u4e2d\u5185\u90e8\u8fdb\u884c\u8c03\u7528\u3002","title":"Overview"},{"location":"#_1","text":"raina-schematic \u662f\u4e00\u4e2a EDA \u9886\u57df\u4e2d\u8ba1\u7b97 schematic \u5e03\u5c40\u5e03\u7ebf\u7684\u76f8\u5bf9\u6700\u4f18\u89e3\u7684\u5de5\u5177\u3002","title":"\u9879\u76ee\u7b80\u4ecb"},{"location":"#_2","text":"raina-schematic \u7684\u76ee\u6807\u662f\u63a5\u53d7\u4e0d\u5177\u5907\u4f4d\u7f6e\u4fe1\u606f\u7684\u539f\u59cb\u6570\u636e\u540e\uff0c\u6839\u636e\u8fde\u63a5\u5173\u7cfb\uff0c\u751f\u6210\u8db3\u4ee5\u63cf\u8ff0\u51fa\u5982\u4e0b\u89c6\u56fe\u7684\u6570\u636e:","title":"\u4e00\u3001\u76ee\u6807\u662f\u4ec0\u4e48"},{"location":"#_3","text":"\u5224\u65ad\u7a0b\u5e8f\u4f18\u52a3\u7684\u6307\u6807\u4e3b\u8981\u6709 \u8fde\u63a5\u7ebf\u4ea4\u53c9\u6570 \u8fde\u63a5\u7ebf\u62d0\u5f2f\u6570 \u89c6\u89c9\u6548\u679c \u5176\u4e2d1,2\u6761\u53ef\u4ee5\u901a\u8fc7\u7edf\u8ba1\u8fc5\u901f\u8fdb\u884c\u5224\u65ad\uff0c\u7b2c\u4e09\u6761\u6bd4\u8f83\u62bd\u8c61\uff0c\u4f46\u4e1a\u754c\u4e5f\u6709\u76f8\u5173\u7684bp\u53ef\u4ee5\u8fdb\u884c\u53c2\u8003\u3002","title":"\u6307\u6807"},{"location":"#_4","text":"","title":"\u4e8c\u3001\u6838\u5fc3\u673a\u5236"},{"location":"#_5","text":"","title":"\u6838\u5fc3\u6570\u636e\u7c7b\u578b"},{"location":"#nodeproto","text":"NodeProto \u662f\u4e00\u4e2a\u865a\u7684\u6982\u5ff5\uff0c\u4f46\u662f\u9700\u8981\u7528\u6237\u8fdb\u884c\u5b9a\u4e49\u3002 raina-schematic \u9700\u8981\u7528\u6237\u5b9a\u4e49\u597d \u8282\u70b9\u6a21\u677f(NodeProto) , \u8282\u70b9(Node) , \u7aef\u53e3(Port) , \u8fde\u63a5\u7ebf(Edge) \u7684\u6570\u636e\uff0c\u7136\u540e\u8f93\u51fa\u7ed9\u7528\u6237\u8db3\u4ee5\u6e32\u67d3\u6210\u4ee5\u4e0b\u56fe\u7247\u7684\u6570\u636e raina-schematic \u652f\u6301\u4f7f\u7528 bin \u6587\u4ef6\uff0c\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u7684\u5f62\u5f0f\u8f93\u5165\u539f\u59cb\u6570\u636e\uff0c\u5e76\u8f93\u51fa json\uff0c\u4e5f\u652f\u6301\u901a\u8fc7\u9759\u6001\u94fe\u63a5\u5e93\u7684\u5f62\u5f0f\uff0c\u5f15\u5165 includes \u548c .a \u6587\u4ef6\uff0c\u5728\u7a0b\u5e8f\u4e2d\u5185\u90e8\u8fdb\u884c\u8c03\u7528\u3002","title":"\u8282\u70b9\u6a21\u677f NodeProto"},{"location":"api/","text":"API \u4f7f\u7528\u8bf4\u660e \u00b6 \u8c03\u7528\u793a\u4f8b \u00b6 #include \"schematic/include/Graph.h\" #include \"schematic/include/LayeredEnginee.h\" #include \"schematic/include/Node.h\" #include \"schematic/include/NodeProto.h\" #include \"schematic/include/Port.h\" #include \"schematic/include/utils/VectorUtil.h\" std :: shared_ptr < gui :: protocol :: Graph > runSchematic () { auto graph = std :: make_shared < gui :: protocol :: Graph > (); auto enginee = std :: make_shared < gui :: protocol :: LayeredEnginee > ( graph ); int protoId = 1 ; graph -> addNodeProto ( \"nodeProtoName\" , 80 , 20 , protoId ); auto port = graph -> addPort ( pinHN , portId ++ , gui :: protocol :: PortType :: OUTPUT , protoId ); auto node = graph -> addNode ( nodeId ++ , protoId , cellHN , gui :: protocol :: NodeSide :: FIRST_SEPARATE ); graph -> addEdge ( outport . node , outport . port , inport . node , inport . port , netHandleName ); enginee -> layered (); return enginee -> getGraph (); } Edge.h \u00b6 Edge \u7c7b \u00b6 \u6784\u9020\u51fd\u6570 Edge ( std :: shared_ptr < Node > & srcNode , std :: shared_ptr < Port > & srcPort , std :: shared_ptr < Node > & dstNode , std :: shared_ptr < Port > & dstPort , std :: string name ); \u65b9\u6cd5 EdgeTarget getSrc (); EdgeTarget getDst (); EdgeTarget getOther ( const std :: shared_ptr < Node > & someNode ); EdgeTarget getOther ( EdgeTarget & edgeTarget ); void setSrc ( EdgeTarget & nextSrc ); void setDst ( EdgeTarget & nextDst ); KVector getSrcPoint (); KVector getDstPoint (); KVectorChain & getBendPoints (); std :: vector < Line > getLines (); int countIntersections ( std :: shared_ptr < Edge > & edge ); std :: pair < int , std :: vector < KVector >> getIntersections ( std :: shared_ptr < Edge > & edge ); bool isInLayerEdge (); nlohmann :: json json (); void hidden (); void show (); bool isReverse (); static std :: optional < KVector > getIntersection ( const Line & line1 , const Line & line2 ); Graph.h \u00b6 Graph \u7c7b \u00b6 \u6784\u9020\u51fd\u6570 Graph (); \u65b9\u6cd5 std :: shared_ptr < NodeProto > addNodeProto ( const std :: shared_ptr < NodeProto > & nodeProto ); std :: shared_ptr < NodeProto > addNodeProto ( std :: string name , double width , double height , int id ); std :: vector < std :: shared_ptr < NodeProto >> & getNodeProtos (); std :: shared_ptr < NodeProto > getDummyNodeProto (); std :: shared_ptr < Port > addPort ( std :: string name , int id , PortType portType , int protoId ); std :: vector < std :: shared_ptr < Port >> & getPorts (); std :: shared_ptr < Port > getPortById ( int id ); void updateAllPortPos (); std :: shared_ptr < Node > addNode ( const std :: shared_ptr < Node > & node ); std :: shared_ptr < Node > addNode ( int id , int protoId , std :: string name ); std :: shared_ptr < Node > addNode ( int id , int protoId , std :: string name , NodeSide side ); std :: shared_ptr < Node > getNodeById ( int id ); void removeNode ( std :: shared_ptr < Node > & node ); std :: shared_ptr < Edge > addEdge ( std :: shared_ptr < Edge > & edge ); std :: shared_ptr < Edge > addEdge ( std :: shared_ptr < Node > & srcNode , std :: shared_ptr < Port > & srcPort , std :: shared_ptr < Node > & dstNode , std :: shared_ptr < Port > & dstPort , std :: string name ); std :: shared_ptr < Edge > addEdge ( int srcNodeId , int srcPortId , int dstNodeId , int dstPortId , std :: string name ); void removeEdge ( std :: shared_ptr < Edge > & edge ); std :: vector < std :: shared_ptr < Node >> & getNodes (); std :: vector < std :: shared_ptr < Edge >> & getEdges (); std :: vector < std :: shared_ptr < Layer >> & getLayers (); void addLayers ( const std :: shared_ptr < Layer > & layer ); std :: vector < std :: shared_ptr < Node >> & getLayerlessNodes (); std :: vector < std :: shared_ptr < Node >> & getHiddenNodes (); void setHiddenNodes ( std :: vector < std :: shared_ptr < Node >> & nodes ); std :: vector < std :: vector < std :: shared_ptr < Node >>> toNodeArray (); nlohmann :: json json (); Node.h \u00b6 Node \u7c7b \u00b6 \u6784\u9020\u51fd\u6570 explicit Node ( std :: string name , std :: shared_ptr < NodeProto > & proto , int _id ); Node ( std :: string name , std :: shared_ptr < NodeProto > & proto , int _id , NodeSide side ); \u65b9\u6cd5 int getId () const ; void setId ( int id ); std :: shared_ptr < NodeProto > getProto (); KVector & getSize (); std :: vector < std :: shared_ptr < Port >> & getInputPorts (); std :: vector < std :: shared_ptr < Port >> & getOutputPorts (); std :: vector < std :: shared_ptr < Port >> getAllPorts (); std :: vector < std :: shared_ptr < Port >> & getPortsByPortType ( PortType type ); std :: vector < EdgeTarget > getConnectedPorts ( std :: shared_ptr < Port > & port ); KVector getPortPos ( std :: shared_ptr < Port > & port ); std :: vector < std :: shared_ptr < Edge >> getEdges (); std :: vector < std :: shared_ptr < Edge >> getIncomingEdges (); std :: vector < std :: shared_ptr < Edge >> getOutgoingEdges (); std :: vector < std :: shared_ptr < Edge >> getEdgesByPort ( const std :: shared_ptr < Port > & port ); void addEdge ( std :: shared_ptr < Port > & port , std :: shared_ptr < Edge > & edge ); void removeEdge ( std :: shared_ptr < Port > & port , std :: shared_ptr < Edge > & edge ); std :: shared_ptr < Layer > & getLayer (); NodeSide getSide (); void setSide ( NodeSide nextSide ); HiddenNodeConnections :: Connection getHiddenNodeConnections (); void setHiddenNodeConnections ( HiddenNodeConnections :: Connection & connections ); void setLayer ( const std :: shared_ptr < Layer > & layer ); nlohmann :: json json (); void setDummy ( const std :: shared_ptr < Edge > & dummyOrigin ); void setDummySource ( const std :: shared_ptr < Port > & dummySource ); void setDummyTarget ( const std :: shared_ptr < Port > & dummyTarget ); NodeProto.h \u00b6 NodeProto \u7c7b \u00b6 \u6784\u9020\u51fd\u6570 NodeProto ( std :: string name , double width , double height , int id ); \u65b9\u6cd5 std :: shared_ptr < Port > addPort ( std :: string portName , int id , PortType portType ); void updatePortPos (); Port.h \u00b6 Port \u7c7b \u00b6 \u6784\u9020\u51fd\u6570 explicit Port ( std :: string name , int _id , PortType portType ); \u65b9\u6cd5 KVector getAnchor (); nlohmann :: json json ();","title":"API Reference"},{"location":"api/#api","text":"","title":"API \u4f7f\u7528\u8bf4\u660e"},{"location":"api/#_1","text":"#include \"schematic/include/Graph.h\" #include \"schematic/include/LayeredEnginee.h\" #include \"schematic/include/Node.h\" #include \"schematic/include/NodeProto.h\" #include \"schematic/include/Port.h\" #include \"schematic/include/utils/VectorUtil.h\" std :: shared_ptr < gui :: protocol :: Graph > runSchematic () { auto graph = std :: make_shared < gui :: protocol :: Graph > (); auto enginee = std :: make_shared < gui :: protocol :: LayeredEnginee > ( graph ); int protoId = 1 ; graph -> addNodeProto ( \"nodeProtoName\" , 80 , 20 , protoId ); auto port = graph -> addPort ( pinHN , portId ++ , gui :: protocol :: PortType :: OUTPUT , protoId ); auto node = graph -> addNode ( nodeId ++ , protoId , cellHN , gui :: protocol :: NodeSide :: FIRST_SEPARATE ); graph -> addEdge ( outport . node , outport . port , inport . node , inport . port , netHandleName ); enginee -> layered (); return enginee -> getGraph (); }","title":"\u8c03\u7528\u793a\u4f8b"},{"location":"api/#edgeh","text":"","title":"Edge.h"},{"location":"api/#edge","text":"\u6784\u9020\u51fd\u6570 Edge ( std :: shared_ptr < Node > & srcNode , std :: shared_ptr < Port > & srcPort , std :: shared_ptr < Node > & dstNode , std :: shared_ptr < Port > & dstPort , std :: string name ); \u65b9\u6cd5 EdgeTarget getSrc (); EdgeTarget getDst (); EdgeTarget getOther ( const std :: shared_ptr < Node > & someNode ); EdgeTarget getOther ( EdgeTarget & edgeTarget ); void setSrc ( EdgeTarget & nextSrc ); void setDst ( EdgeTarget & nextDst ); KVector getSrcPoint (); KVector getDstPoint (); KVectorChain & getBendPoints (); std :: vector < Line > getLines (); int countIntersections ( std :: shared_ptr < Edge > & edge ); std :: pair < int , std :: vector < KVector >> getIntersections ( std :: shared_ptr < Edge > & edge ); bool isInLayerEdge (); nlohmann :: json json (); void hidden (); void show (); bool isReverse (); static std :: optional < KVector > getIntersection ( const Line & line1 , const Line & line2 );","title":"Edge \u7c7b"},{"location":"api/#graphh","text":"","title":"Graph.h"},{"location":"api/#graph","text":"\u6784\u9020\u51fd\u6570 Graph (); \u65b9\u6cd5 std :: shared_ptr < NodeProto > addNodeProto ( const std :: shared_ptr < NodeProto > & nodeProto ); std :: shared_ptr < NodeProto > addNodeProto ( std :: string name , double width , double height , int id ); std :: vector < std :: shared_ptr < NodeProto >> & getNodeProtos (); std :: shared_ptr < NodeProto > getDummyNodeProto (); std :: shared_ptr < Port > addPort ( std :: string name , int id , PortType portType , int protoId ); std :: vector < std :: shared_ptr < Port >> & getPorts (); std :: shared_ptr < Port > getPortById ( int id ); void updateAllPortPos (); std :: shared_ptr < Node > addNode ( const std :: shared_ptr < Node > & node ); std :: shared_ptr < Node > addNode ( int id , int protoId , std :: string name ); std :: shared_ptr < Node > addNode ( int id , int protoId , std :: string name , NodeSide side ); std :: shared_ptr < Node > getNodeById ( int id ); void removeNode ( std :: shared_ptr < Node > & node ); std :: shared_ptr < Edge > addEdge ( std :: shared_ptr < Edge > & edge ); std :: shared_ptr < Edge > addEdge ( std :: shared_ptr < Node > & srcNode , std :: shared_ptr < Port > & srcPort , std :: shared_ptr < Node > & dstNode , std :: shared_ptr < Port > & dstPort , std :: string name ); std :: shared_ptr < Edge > addEdge ( int srcNodeId , int srcPortId , int dstNodeId , int dstPortId , std :: string name ); void removeEdge ( std :: shared_ptr < Edge > & edge ); std :: vector < std :: shared_ptr < Node >> & getNodes (); std :: vector < std :: shared_ptr < Edge >> & getEdges (); std :: vector < std :: shared_ptr < Layer >> & getLayers (); void addLayers ( const std :: shared_ptr < Layer > & layer ); std :: vector < std :: shared_ptr < Node >> & getLayerlessNodes (); std :: vector < std :: shared_ptr < Node >> & getHiddenNodes (); void setHiddenNodes ( std :: vector < std :: shared_ptr < Node >> & nodes ); std :: vector < std :: vector < std :: shared_ptr < Node >>> toNodeArray (); nlohmann :: json json ();","title":"Graph \u7c7b"},{"location":"api/#nodeh","text":"","title":"Node.h"},{"location":"api/#node","text":"\u6784\u9020\u51fd\u6570 explicit Node ( std :: string name , std :: shared_ptr < NodeProto > & proto , int _id ); Node ( std :: string name , std :: shared_ptr < NodeProto > & proto , int _id , NodeSide side ); \u65b9\u6cd5 int getId () const ; void setId ( int id ); std :: shared_ptr < NodeProto > getProto (); KVector & getSize (); std :: vector < std :: shared_ptr < Port >> & getInputPorts (); std :: vector < std :: shared_ptr < Port >> & getOutputPorts (); std :: vector < std :: shared_ptr < Port >> getAllPorts (); std :: vector < std :: shared_ptr < Port >> & getPortsByPortType ( PortType type ); std :: vector < EdgeTarget > getConnectedPorts ( std :: shared_ptr < Port > & port ); KVector getPortPos ( std :: shared_ptr < Port > & port ); std :: vector < std :: shared_ptr < Edge >> getEdges (); std :: vector < std :: shared_ptr < Edge >> getIncomingEdges (); std :: vector < std :: shared_ptr < Edge >> getOutgoingEdges (); std :: vector < std :: shared_ptr < Edge >> getEdgesByPort ( const std :: shared_ptr < Port > & port ); void addEdge ( std :: shared_ptr < Port > & port , std :: shared_ptr < Edge > & edge ); void removeEdge ( std :: shared_ptr < Port > & port , std :: shared_ptr < Edge > & edge ); std :: shared_ptr < Layer > & getLayer (); NodeSide getSide (); void setSide ( NodeSide nextSide ); HiddenNodeConnections :: Connection getHiddenNodeConnections (); void setHiddenNodeConnections ( HiddenNodeConnections :: Connection & connections ); void setLayer ( const std :: shared_ptr < Layer > & layer ); nlohmann :: json json (); void setDummy ( const std :: shared_ptr < Edge > & dummyOrigin ); void setDummySource ( const std :: shared_ptr < Port > & dummySource ); void setDummyTarget ( const std :: shared_ptr < Port > & dummyTarget );","title":"Node \u7c7b"},{"location":"api/#nodeprotoh","text":"","title":"NodeProto.h"},{"location":"api/#nodeproto","text":"\u6784\u9020\u51fd\u6570 NodeProto ( std :: string name , double width , double height , int id ); \u65b9\u6cd5 std :: shared_ptr < Port > addPort ( std :: string portName , int id , PortType portType ); void updatePortPos ();","title":"NodeProto \u7c7b"},{"location":"api/#porth","text":"","title":"Port.h"},{"location":"api/#port","text":"\u6784\u9020\u51fd\u6570 explicit Port ( std :: string name , int _id , PortType portType ); \u65b9\u6cd5 KVector getAnchor (); nlohmann :: json json ();","title":"Port \u7c7b"},{"location":"quick-start/","text":"\u5feb\u901f\u5f00\u59cb \u00b6 \u4e00\u3001\u4f7f\u7528\u7684\u9650\u5236 \u00b6 raina-schematic \u63a5\u53d7\u7684\u6570\u636e\u548c\u751f\u6210\u7684\u6570\u636e\u90fd\u6709\u4ee5\u4e0b\u9ed8\u8ba4\u7684\u9650\u5236\u8303\u56f4\u3002 NodeProto \u51b3\u5b9a\u4e86 Node \u5c55\u793a\u7684\u5c3a\u5bf8\uff0c\u4e0d\u4f9d\u8d56\u5176\u4ed6\u6570\u636e Port \u5206\u4e3a inputPort \u4e0e outputPort\uff0c\u6302\u8f7d\u5728 NodeProto \u4e0a\uff0c\u652f\u6301\u4f7f\u7528 Port \u548c NodeProto \u63d0\u4f9b\u7684 api \u81ea\u5b9a\u4e49\u7279\u5b9a Port \u7684\u5750\u6807\u4f4d\u7f6e\uff0c\u5f53\u4e0d\u8fdb\u884c\u81ea\u5b9a\u4e49\u65f6\uff0c\u9ed8\u8ba4 inputPort \u4f1a\u6302\u8f7d\u5728 NodeProto \u5de6\u4fa7\uff0coutputPort \u4f1a\u6302\u8f7d\u5728 NodeProto \u53f3\u4fa7\u3002Port \u4f9d\u8d56 NodeProto\u3002 Node \u662f NodeProto \u7684\u5b9e\u4f8b\uff0c\u4e00\u4e2a NodeProto \u5141\u8bb8\u5bf9\u5e94\u591a\u4e2a Node\u3002Node \u4f9d\u8d56 NodeProto\u3002 Edge \u662f\u4e24\u4e2a Node -> Port \u4e4b\u95f4\u7684\u8fde\u7ebf(\u56e0\u4e3a Port \u53ea\u4e0e NodeProto \u5173\u8054\uff0c\u6240\u4ee5\u8981\u5f97\u5230\u4e00\u4e2a\u89c6\u56fe\u5c42\u9762\u7684 Port\uff0c\u9700\u8981 Node -> Port \u7684\u6570\u636e\u624d\u8db3\u4ee5\u5173\u8054)\uff0c\u5176\u4e2d\u4e00\u4e2a Port \u7684\u7c7b\u578b\u5fc5\u987b\u662f inputPort\uff0c\u53e6\u4e00\u4e2a Port \u7684\u7c7b\u578b\u5fc5\u987b\u662f outputPort \u4e8c\u3001\u914d\u7f6e\u6587\u4ef6\u793a\u4f8b \u00b6 # id displayname width height proto 0 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/b_zero 80 24 proto 1 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/a_reg 80 48 proto 2 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/a_lt_b 80 36 proto 3 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/sub 80 36 proto 4 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/b_mux 80 48 proto 5 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/b_reg 80 48 proto 6 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/a_mux 80 60 proto 7 is_a_lt_b 1 1 proto 8 b_reg_en 1 1 proto 9 b_mux_sel 1 1 proto 10 is_b_zero 1 1 proto 11 a_mux_sel 1 1 proto 12 clk 1 1 proto 13 resp_msg 1 1 proto 14 req_msg_b 1 1 proto 15 req_msg_a 1 1 proto 16 a_reg_en 1 1 # id proto name port 0 0 out out port 1 0 in_ in port 2 1 clk in port 3 1 out out port 4 1 en in port 5 1 in_ in port 6 2 out out port 7 2 in1 in port 8 2 in0 in port 9 3 in1 in port 10 3 in0 in port 11 3 out out port 12 4 in_$000 in port 13 4 out out port 14 4 sel in port 15 4 in_$001 in port 16 5 clk in port 17 5 out out port 18 5 en in port 19 5 in_ in port 20 6 sel in port 21 6 in_$001 in port 22 6 in_$002 in port 23 6 out out port 24 6 in_$000 in port 25 7 is_a_lt_b in port 26 8 b_reg_en out port 27 9 b_mux_sel out port 28 10 is_b_zero in port 29 11 a_mux_sel out port 30 12 clk out port 31 13 resp_msg in port 32 14 req_msg_b out port 33 15 req_msg_a out port 34 16 a_reg_en out # id proto name type node 0 0 b_zero default node 1 1 a_reg default node 2 2 a_lt_b default node 3 3 sub default node 4 4 b_mux default node 5 5 b_reg default node 6 6 a_mux default node 7 7 is_a_lt_b east node 8 8 b_reg_en west node 9 9 b_mux_sel west node 10 10 is_b_zero east node 11 11 a_mux_sel west node 12 12 clk west node 13 13 resp_msg east node 14 14 req_msg_b west node 15 15 req_msg_a west node 16 16 a_reg_en west # outnode outpin innode inpin name edge 0 0 10 28 is_b_zero edge 8 26 5 18 b_reg_en edge 9 27 4 14 b_mux_sel edge 4 13 5 19 b_mux$out edge 3 11 6 21 resp_msg edge 3 11 13 31 resp_msg edge 11 29 6 20 a_mux_sel edge 6 23 1 5 a_mux$out edge 12 30 1 2 clk edge 12 30 5 16 clk edge 2 6 7 25 is_a_lt_b edge 1 3 2 8 a_reg$out edge 1 3 3 10 a_reg$out edge 1 3 4 12 a_reg$out edge 5 17 0 1 b_reg$out edge 5 17 2 7 b_reg$out edge 5 17 3 9 b_reg$out edge 5 17 6 22 b_reg$out edge 15 33 6 24 req_msg_a edge 14 32 4 15 req_msg_b edge 16 34 1 4 a_reg_en","title":"Quick Start"},{"location":"quick-start/#_1","text":"","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"quick-start/#_2","text":"raina-schematic \u63a5\u53d7\u7684\u6570\u636e\u548c\u751f\u6210\u7684\u6570\u636e\u90fd\u6709\u4ee5\u4e0b\u9ed8\u8ba4\u7684\u9650\u5236\u8303\u56f4\u3002 NodeProto \u51b3\u5b9a\u4e86 Node \u5c55\u793a\u7684\u5c3a\u5bf8\uff0c\u4e0d\u4f9d\u8d56\u5176\u4ed6\u6570\u636e Port \u5206\u4e3a inputPort \u4e0e outputPort\uff0c\u6302\u8f7d\u5728 NodeProto \u4e0a\uff0c\u652f\u6301\u4f7f\u7528 Port \u548c NodeProto \u63d0\u4f9b\u7684 api \u81ea\u5b9a\u4e49\u7279\u5b9a Port \u7684\u5750\u6807\u4f4d\u7f6e\uff0c\u5f53\u4e0d\u8fdb\u884c\u81ea\u5b9a\u4e49\u65f6\uff0c\u9ed8\u8ba4 inputPort \u4f1a\u6302\u8f7d\u5728 NodeProto \u5de6\u4fa7\uff0coutputPort \u4f1a\u6302\u8f7d\u5728 NodeProto \u53f3\u4fa7\u3002Port \u4f9d\u8d56 NodeProto\u3002 Node \u662f NodeProto \u7684\u5b9e\u4f8b\uff0c\u4e00\u4e2a NodeProto \u5141\u8bb8\u5bf9\u5e94\u591a\u4e2a Node\u3002Node \u4f9d\u8d56 NodeProto\u3002 Edge \u662f\u4e24\u4e2a Node -> Port \u4e4b\u95f4\u7684\u8fde\u7ebf(\u56e0\u4e3a Port \u53ea\u4e0e NodeProto \u5173\u8054\uff0c\u6240\u4ee5\u8981\u5f97\u5230\u4e00\u4e2a\u89c6\u56fe\u5c42\u9762\u7684 Port\uff0c\u9700\u8981 Node -> Port \u7684\u6570\u636e\u624d\u8db3\u4ee5\u5173\u8054)\uff0c\u5176\u4e2d\u4e00\u4e2a Port \u7684\u7c7b\u578b\u5fc5\u987b\u662f inputPort\uff0c\u53e6\u4e00\u4e2a Port \u7684\u7c7b\u578b\u5fc5\u987b\u662f outputPort","title":"\u4e00\u3001\u4f7f\u7528\u7684\u9650\u5236"},{"location":"quick-start/#_3","text":"# id displayname width height proto 0 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/b_zero 80 24 proto 1 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/a_reg 80 48 proto 2 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/a_lt_b 80 36 proto 3 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/sub 80 36 proto 4 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/b_mux 80 48 proto 5 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/b_reg 80 48 proto 6 /WORK/GcdUnitDpathRTL_0x4d0fc71ead8d3d9e/a_mux 80 60 proto 7 is_a_lt_b 1 1 proto 8 b_reg_en 1 1 proto 9 b_mux_sel 1 1 proto 10 is_b_zero 1 1 proto 11 a_mux_sel 1 1 proto 12 clk 1 1 proto 13 resp_msg 1 1 proto 14 req_msg_b 1 1 proto 15 req_msg_a 1 1 proto 16 a_reg_en 1 1 # id proto name port 0 0 out out port 1 0 in_ in port 2 1 clk in port 3 1 out out port 4 1 en in port 5 1 in_ in port 6 2 out out port 7 2 in1 in port 8 2 in0 in port 9 3 in1 in port 10 3 in0 in port 11 3 out out port 12 4 in_$000 in port 13 4 out out port 14 4 sel in port 15 4 in_$001 in port 16 5 clk in port 17 5 out out port 18 5 en in port 19 5 in_ in port 20 6 sel in port 21 6 in_$001 in port 22 6 in_$002 in port 23 6 out out port 24 6 in_$000 in port 25 7 is_a_lt_b in port 26 8 b_reg_en out port 27 9 b_mux_sel out port 28 10 is_b_zero in port 29 11 a_mux_sel out port 30 12 clk out port 31 13 resp_msg in port 32 14 req_msg_b out port 33 15 req_msg_a out port 34 16 a_reg_en out # id proto name type node 0 0 b_zero default node 1 1 a_reg default node 2 2 a_lt_b default node 3 3 sub default node 4 4 b_mux default node 5 5 b_reg default node 6 6 a_mux default node 7 7 is_a_lt_b east node 8 8 b_reg_en west node 9 9 b_mux_sel west node 10 10 is_b_zero east node 11 11 a_mux_sel west node 12 12 clk west node 13 13 resp_msg east node 14 14 req_msg_b west node 15 15 req_msg_a west node 16 16 a_reg_en west # outnode outpin innode inpin name edge 0 0 10 28 is_b_zero edge 8 26 5 18 b_reg_en edge 9 27 4 14 b_mux_sel edge 4 13 5 19 b_mux$out edge 3 11 6 21 resp_msg edge 3 11 13 31 resp_msg edge 11 29 6 20 a_mux_sel edge 6 23 1 5 a_mux$out edge 12 30 1 2 clk edge 12 30 5 16 clk edge 2 6 7 25 is_a_lt_b edge 1 3 2 8 a_reg$out edge 1 3 3 10 a_reg$out edge 1 3 4 12 a_reg$out edge 5 17 0 1 b_reg$out edge 5 17 2 7 b_reg$out edge 5 17 3 9 b_reg$out edge 5 17 6 22 b_reg$out edge 15 33 6 24 req_msg_a edge 14 32 4 15 req_msg_b edge 16 34 1 4 a_reg_en","title":"\u4e8c\u3001\u914d\u7f6e\u6587\u4ef6\u793a\u4f8b"}]}