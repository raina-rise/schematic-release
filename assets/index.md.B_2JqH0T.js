import{_ as o}from"./chunks/demo.BuoysP8j.js";import{_ as a,c as d,o as c,ae as r}from"./chunks/framework.CWgCn7-Z.js";const _=JSON.parse('{"title":"项目简介","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),t={name:"index.md"};function i(n,e,h,l,s,p){return c(),d("div",null,e[0]||(e[0]=[r('<h1 id="项目简介" tabindex="-1">项目简介 <a class="header-anchor" href="#项目简介" aria-label="Permalink to &quot;项目简介&quot;">​</a></h1><p><code>raina-schematic</code>(<a href="https://github.com/raina-rise/schematic" target="_blank" rel="noreferrer">https://github.com/raina-rise/schematic</a>) 是一个 EDA 领域中计算 schematic 布局布线的相对最优解的工具。</p><h2 id="一、目标是什么" tabindex="-1">一、目标是什么 <a class="header-anchor" href="#一、目标是什么" aria-label="Permalink to &quot;一、目标是什么&quot;">​</a></h2><p><code>raina-schematic</code> 的目标是接受不具备位置信息的原始数据后，根据连接关系，生成足以描述出如下视图的数据:</p><p><img src="'+o+'" alt="demo"></p><p>其中必要的原始数据包括 <code>节点(Node)</code>, <code>端口(Port)</code>, <code>连接(Edge)</code>。</p><h2 id="二、-指标" tabindex="-1">二、 指标 <a class="header-anchor" href="#二、-指标" aria-label="Permalink to &quot;二、 指标&quot;">​</a></h2><p>判断程序优劣的指标主要有</p><ol><li>连接线交叉数</li><li>连接线拐弯数</li><li>视觉效果</li></ol><p>其中1,2条可以通过统计迅速进行判断，第三条比较抽象，但业界也有相关的bp可以进行参考。</p><h2 id="二、核心机制" tabindex="-1">二、核心机制 <a class="header-anchor" href="#二、核心机制" aria-label="Permalink to &quot;二、核心机制&quot;">​</a></h2><h3 id="_2-1-核心数据类型" tabindex="-1">2.1 核心数据类型 <a class="header-anchor" href="#_2-1-核心数据类型" aria-label="Permalink to &quot;2.1 核心数据类型&quot;">​</a></h3><h4 id="节点模板-nodeproto" tabindex="-1">节点模板 NodeProto <a class="header-anchor" href="#节点模板-nodeproto" aria-label="Permalink to &quot;节点模板 NodeProto&quot;">​</a></h4><p><code>NodeProto</code> 是 <code>node</code> 的模板，来自同一个 <code>NodeProto</code> 的 <code>Node</code> 都有相同的 <code>Port</code> 且这些 <code>Port</code> 的顺序也是相同的。</p><p><code>NodeProto</code> 是一个虚的概念，但是需要用户进行定义。</p><h4 id="节点实例-node" tabindex="-1">节点实例 Node <a class="header-anchor" href="#节点实例-node" aria-label="Permalink to &quot;节点实例 Node&quot;">​</a></h4><p><code>Node</code> 依赖 <code>NodeProto</code> 生成，每一个 <code>Node</code> 对应最后图数据中的一个节点实例。</p><h4 id="连接端口-port" tabindex="-1">连接端口 Port <a class="header-anchor" href="#连接端口-port" aria-label="Permalink to &quot;连接端口 Port&quot;">​</a></h4><p><code>Port</code> 是挂载在 <code>NodeProto</code> 上的端口数据，用于</p><p>所有 <code>连接关系(Edge)</code> 必须是两个 <code>Node</code> + <code>Port</code> 之间的连线。</p><p><code>raina-schematic</code> 需要用户定义好 <code>节点模板(NodeProto)</code>, <code>节点(Node)</code>, <code>端口(Port)</code>, <code>连接线(Edge)</code> 的数据，然后输出给用户足以渲染成以下图片的数据</p><p><code>raina-schematic</code> 支持使用 bin 文件，通过配置文件的形式输入原始数据，并输出 json，也支持通过静态链接库的形式，引入 includes 和 .a 文件，在程序中内部进行调用。</p>',22)]))}const u=a(t,[["render",i]]);export{_ as __pageData,u as default};
