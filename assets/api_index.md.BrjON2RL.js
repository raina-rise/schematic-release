import{_ as e,c as o,o as l,ae as i}from"./chunks/framework.CWgCn7-Z.js";const N=JSON.parse('{"title":"API 文档","description":"","frontmatter":{},"headers":[],"relativePath":"api/index.md","filePath":"api/index.md"}'),c={name:"api/index.md"};function t(r,d,a,u,s,p){return l(),o("div",null,d[0]||(d[0]=[i('<h1 id="api-文档" tabindex="-1">API 文档 <a class="header-anchor" href="#api-文档" aria-label="Permalink to &quot;API 文档&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p><code>Graph</code> 类管理节点和边的关系，所有操作都可以基于这个类完成</p><h2 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h2><h3 id="gui-protocol-graph" tabindex="-1"><code>gui::protocol::Graph</code> <a class="header-anchor" href="#gui-protocol-graph" aria-label="Permalink to &quot;`gui::protocol::Graph`&quot;">​</a></h3><h4 id="公共成员函数" tabindex="-1">公共成员函数 <a class="header-anchor" href="#公共成员函数" aria-label="Permalink to &quot;公共成员函数&quot;">​</a></h4><ul><li><p><code>Graph()</code></p><ul><li>构造函数。</li></ul></li><li><p><code>std::shared_ptr&lt;NodeProto&gt; addNodeProto(const std::shared_ptr&lt;NodeProto&gt; &amp;nodeProto)</code></p><ul><li>使用 <code>NodeProto</code> 的指针添加 <code>NodeProto</code>。</li><li>参数: <ul><li><code>nodeProto</code>: <code>NodeProto</code> 的指针。</li></ul></li><li>返回: <ul><li>添加的 <code>NodeProto</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;NodeProto&gt; addNodeProto(std::string name, double width, double height, int id)</code></p><ul><li>使用参数添加 <code>NodeProto</code>。</li><li>参数: <ul><li><code>name</code>: <code>NodeProto</code> 的名字。</li><li><code>width</code>: <code>NodeProto</code> 的宽度。</li><li><code>height</code>: <code>NodeProto</code> 的高度。</li><li><code>id</code>: <code>NodeProto</code> 的 id, 用于标识 <code>NodeProto</code>, 不能重复。</li></ul></li><li>返回: <ul><li>添加的 <code>NodeProto</code> 的指针。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;NodeProto&gt;&gt; &amp;getNodeProtos()</code></p><ul><li>获取所有 <code>NodeProto</code>。</li><li>返回: <ul><li>所有 <code>NodeProto</code> 的引用。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;NodeProto&gt; getDummyNodeProto()</code></p><ul><li>获取 <code>DummyNode</code> 归属的 <code>NodeProto</code>，内部方法，不应该被外部调用。</li><li>返回: <ul><li><code>DummyNode</code> 归属的 <code>NodeProto</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Port&gt; addPort(std::string name, int id, PortType portType, int protoId)</code></p><ul><li>使用参数添加 <code>Port</code>。</li><li>参数: <ul><li><code>name</code>: <code>Port</code> 的名字。</li><li><code>id</code>: <code>Port</code> 的 id, 用于标识 <code>Port</code>, 不能重复。</li><li><code>portType</code>: <code>Port</code> 的类型, <code>INPUT</code> 或 <code>OUTPUT</code>。</li><li><code>protoId</code>: 归属的 <code>NodeProto</code> 的 id。</li></ul></li><li>返回: <ul><li>添加的 <code>Port</code> 的指针。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Port&gt;&gt; &amp;getPorts()</code></p><ul><li>获取所有 <code>Port</code>。</li><li>返回: <ul><li>所有 <code>Port</code> 的引用。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Port&gt; getPortById(int id)</code></p><ul><li>根据 <code>port</code> 的 id 获取 <code>Port</code>。</li><li>参数: <ul><li><code>id</code>: <code>Port</code> 的 id。</li></ul></li><li>返回: <ul><li>对应 id 的 <code>Port</code> 的指针。</li></ul></li></ul></li><li><p><code>void updateAllPortPos()</code></p><ul><li>调用所有 <code>nodeProto</code> 的 <code>updatePortPos</code> 方法更新 <code>port</code> 的相对坐标。</li></ul></li><li><p><code>std::shared_ptr&lt;Node&gt; addNode(const std::shared_ptr&lt;Node&gt; &amp;node)</code></p><ul><li>使用 <code>Node</code> 的指针添加 <code>Node</code>。</li><li>参数: <ul><li><code>node</code>: <code>Node</code> 的指针。</li></ul></li><li>返回: <ul><li>添加的 <code>Node</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Node&gt; addNode(int id, int protoId, std::string name)</code></p><ul><li>使用参数添加 <code>Node</code>。</li><li>参数: <ul><li><code>id</code>: <code>node</code> 的 id, 用于标识 <code>Node</code>, 不能重复。</li><li><code>protoId</code>: <code>node</code> 归属的 <code>proto</code> 的 id。</li><li><code>name</code>: <code>node</code> 的名字。</li></ul></li><li>返回: <ul><li>添加的 <code>Node</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Node&gt; addNode(int id, int protoId, std::string name, NodeSide side)</code></p><ul><li>使用参数添加固定层级的 <code>Node</code>。</li><li>参数: <ul><li><code>id</code>: <code>node</code> 的 id, 用于标识 <code>Node</code>, 不能重复。</li><li><code>protoId</code>: <code>node</code> 归属的 <code>proto</code> 的 id。</li><li><code>name</code>: <code>node</code> 的名字。</li><li><code>side</code>: 固定层级，可选择第一层或最后一层。</li></ul></li><li>返回: <ul><li>添加的 <code>Node</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Node&gt; getNodeById(int id)</code></p><ul><li>根据 id 获取 <code>Node</code>。</li><li>参数: <ul><li><code>id</code>: <code>Node</code> 的 id。</li></ul></li><li>返回: <ul><li>对应 id 的 <code>Node</code> 的指针。</li></ul></li></ul></li><li><p><code>void removeNode(std::shared_ptr&lt;Node&gt; &amp;node)</code></p><ul><li>移除 <code>Node</code>, 内部方法，不应该被外部调用。</li><li>参数: <ul><li><code>node</code>: <code>Node</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Edge&gt; addEdge(std::shared_ptr&lt;Edge&gt; &amp;edge)</code></p><ul><li>使用 <code>Edge</code> 的指针添加 <code>Edge</code>。</li><li>参数: <ul><li><code>edge</code>: <code>Edge</code> 的指针。</li></ul></li><li>返回: <ul><li>添加的 <code>Edge</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Edge&gt; addEdge(std::shared_ptr&lt;Node&gt; &amp;srcNode, std::shared_ptr&lt;Port&gt; &amp;srcPort, std::shared_ptr&lt;Node&gt; &amp;dstNode, std::shared_ptr&lt;Port&gt; &amp;dstPort, std::string name)</code></p><ul><li>使用参数添加 <code>Edge</code>。</li><li>参数: <ul><li><code>srcNode</code>: 起点 <code>Node</code> 的指针。</li><li><code>srcPort</code>: 起点 <code>Port</code> 的指针。</li><li><code>dstNode</code>: 终点 <code>Node</code> 的指针。</li><li><code>dstPort</code>: 终点 <code>Port</code> 的指针。</li><li><code>name</code>: <code>Edge</code> 的名字。</li></ul></li><li>返回: <ul><li>添加的 <code>Edge</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Edge&gt; addEdge(int srcNodeId, int srcPortId, int dstNodeId, int dstPortId, std::string name)</code></p><ul><li>使用参数添加 <code>Edge</code>。</li><li>参数: <ul><li><code>srcNodeId</code>: 起点 <code>Node</code> 的 id。</li><li><code>srcPortId</code>: 起点 <code>Port</code> 的 id。</li><li><code>dstNodeId</code>: 终点 <code>Node</code> 的 id。</li><li><code>dstPortId</code>: 终点 <code>Port</code> 的 id。</li><li><code>name</code>: <code>Edge</code> 的名字。</li></ul></li><li>返回: <ul><li>添加的 <code>Edge</code> 的指针。</li></ul></li></ul></li><li><p><code>void removeEdge(std::shared_ptr&lt;Edge&gt; &amp;edge)</code></p><ul><li>删除 <code>Edge</code>, 内部方法，不应该被外部调用。</li><li>参数: <ul><li><code>edge</code>: <code>Edge</code> 的指针。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;getNodes()</code></p><ul><li>获取所有 <code>Node</code>。</li><li>返回: <ul><li>所有 <code>Node</code> 的引用。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Edge&gt;&gt; &amp;getEdges()</code></p><ul><li>获取所有 <code>Edge</code>。</li><li>返回: <ul><li>所有 <code>Edge</code> 的引用。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Layer&gt;&gt; &amp;getLayers()</code></p><ul><li>获取所有 <code>Layer</code>。</li><li>返回: <ul><li>所有 <code>Layer</code> 的引用。</li></ul></li></ul></li><li><p><code>void addLayers(const std::shared_ptr&lt;Layer&gt; &amp;layer)</code></p><ul><li>在当前 <code>layers</code> 数组尾部再添加一层 <code>Layer</code>, 内部方法，不应该被外部调用。</li><li>参数: <ul><li><code>layer</code>: <code>Layer</code> 的指针。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;getLayerlessNodes()</code></p><ul><li>获取当前还没分配层级的 <code>Node</code>，内部方法，不应该被外部调用。</li><li>返回: <ul><li>所有还没分配层级的 <code>Node</code> 的引用。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;getHiddenNodes()</code></p><ul><li>内部方法，不应该被外部调用。</li><li>返回: <ul><li>所有隐藏的 <code>Node</code> 的引用。</li></ul></li></ul></li><li><p><code>void setHiddenNodes(std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;nodes)</code></p><ul><li>内部方法，不应该被外部调用。</li><li>参数: <ul><li><code>nodes</code>: 隐藏的 <code>Node</code> 的引用。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::vector&lt;std::shared_ptr&lt;Node&gt;&gt;&gt; toNodeArray()</code></p><ul><li>获取 <code>Node</code> 从左到右，从上到下的二维数组。</li><li>返回: <ul><li><code>Node</code> 的二维数组。</li></ul></li></ul></li><li><p><code>nlohmann::json json()</code></p><ul><li>以 <code>JSON</code> 形式输出数据。</li><li>返回: <ul><li><code>JSON</code> 数据。</li></ul></li></ul></li></ul>',7)]))}const n=e(c,[["render",t]]);export{N as __pageData,n as default};
