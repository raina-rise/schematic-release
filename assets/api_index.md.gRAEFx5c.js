import{_ as e,c as d,o as l,ae as o}from"./chunks/framework.CWgCn7-Z.js";const k=JSON.parse('{"title":"API 文档","description":"","frontmatter":{},"headers":[],"relativePath":"api/index.md","filePath":"api/index.md"}'),t={name:"api/index.md"};function s(a,i,c,h,p,r){return l(),d("div",null,i[0]||(i[0]=[o('<h1 id="api-文档" tabindex="-1">API 文档 <a class="header-anchor" href="#api-文档" aria-label="Permalink to &quot;API 文档&quot;">​</a></h1><h2 id="graph-h" tabindex="-1">Graph.h <a class="header-anchor" href="#graph-h" aria-label="Permalink to &quot;Graph.h&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p><code>Graph</code> 类管理节点和边的关系，所有操作都可以基于这个类完成</p><h3 id="命名空间" tabindex="-1">命名空间 <a class="header-anchor" href="#命名空间" aria-label="Permalink to &quot;命名空间&quot;">​</a></h3><ul><li><code>gui::protocol</code></li></ul><h3 id="公共成员函数" tabindex="-1">公共成员函数 <a class="header-anchor" href="#公共成员函数" aria-label="Permalink to &quot;公共成员函数&quot;">​</a></h3><ul><li><p><code>Graph()</code></p><ul><li>构造函数。</li></ul></li><li><p><code>std::shared_ptr&lt;NodeProto&gt; addNodeProto(const std::shared_ptr&lt;NodeProto&gt; &amp;nodeProto)</code></p><ul><li>使用 <code>NodeProto</code> 的指针添加 <code>NodeProto</code>。</li><li>参数: <ul><li><code>nodeProto</code>: <code>NodeProto</code> 的指针。</li></ul></li><li>返回: <ul><li>添加的 <code>NodeProto</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;NodeProto&gt; addNodeProto(std::string name, double width, double height, int id)</code></p><ul><li>使用参数添加 <code>NodeProto</code>。</li><li>参数: <ul><li><code>name</code>: <code>NodeProto</code> 的名字。</li><li><code>width</code>: <code>NodeProto</code> 的宽度。</li><li><code>height</code>: <code>NodeProto</code> 的高度。</li><li><code>id</code>: <code>NodeProto</code> 的 id, 用于标识 <code>NodeProto</code>, 不能重复。</li></ul></li><li>返回: <ul><li>添加的 <code>NodeProto</code> 的指针。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;NodeProto&gt;&gt; &amp;getNodeProtos()</code></p><ul><li>获取所有 <code>NodeProto</code>。</li><li>返回: <ul><li>所有 <code>NodeProto</code> 的引用。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;NodeProto&gt; getDummyNodeProto()</code></p><ul><li>获取 <code>DummyNode</code> 归属的 <code>NodeProto</code>，内部方法，不应该被外部调用。</li><li>返回: <ul><li><code>DummyNode</code> 归属的 <code>NodeProto</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Port&gt; addPort(std::string name, int id, PortType portType, int protoId)</code></p><ul><li>使用参数添加 <code>Port</code>。</li><li>参数: <ul><li><code>name</code>: <code>Port</code> 的名字。</li><li><code>id</code>: <code>Port</code> 的 id, 用于标识 <code>Port</code>, 不能重复。</li><li><code>portType</code>: <code>Port</code> 的类型, <code>INPUT</code> 或 <code>OUTPUT</code>。</li><li><code>protoId</code>: 归属的 <code>NodeProto</code> 的 id。</li></ul></li><li>返回: <ul><li>添加的 <code>Port</code> 的指针。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Port&gt;&gt; &amp;getPorts()</code></p><ul><li>获取所有 <code>Port</code>。</li><li>返回: <ul><li>所有 <code>Port</code> 的引用。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Port&gt; getPortById(int id)</code></p><ul><li>根据 <code>port</code> 的 id 获取 <code>Port</code>。</li><li>参数: <ul><li><code>id</code>: <code>Port</code> 的 id。</li></ul></li><li>返回: <ul><li>对应 id 的 <code>Port</code> 的指针。</li></ul></li></ul></li><li><p><code>void updateAllPortPos()</code></p><ul><li>调用所有 <code>nodeProto</code> 的 <code>updatePortPos</code> 方法更新 <code>port</code> 的相对坐标。</li></ul></li><li><p><code>std::shared_ptr&lt;Node&gt; addNode(const std::shared_ptr&lt;Node&gt; &amp;node)</code></p><ul><li>使用 <code>Node</code> 的指针添加 <code>Node</code>。</li><li>参数: <ul><li><code>node</code>: <code>Node</code> 的指针。</li></ul></li><li>返回: <ul><li>添加的 <code>Node</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Node&gt; addNode(int id, int protoId, std::string name)</code></p><ul><li>使用参数添加 <code>Node</code>。</li><li>参数: <ul><li><code>id</code>: <code>node</code> 的 id, 用于标识 <code>Node</code>, 不能重复。</li><li><code>protoId</code>: <code>node</code> 归属的 <code>proto</code> 的 id。</li><li><code>name</code>: <code>node</code> 的名字。</li></ul></li><li>返回: <ul><li>添加的 <code>Node</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Node&gt; addNode(int id, int protoId, std::string name, NodeSide side)</code></p><ul><li>使用参数添加固定层级的 <code>Node</code>。</li><li>参数: <ul><li><code>id</code>: <code>node</code> 的 id, 用于标识 <code>Node</code>, 不能重复。</li><li><code>protoId</code>: <code>node</code> 归属的 <code>proto</code> 的 id。</li><li><code>name</code>: <code>node</code> 的名字。</li><li><code>side</code>: 固定层级，可选择第一层或最后一层。</li></ul></li><li>返回: <ul><li>添加的 <code>Node</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Node&gt; getNodeById(int id)</code></p><ul><li>根据 id 获取 <code>Node</code>。</li><li>参数: <ul><li><code>id</code>: <code>Node</code> 的 id。</li></ul></li><li>返回: <ul><li>对应 id 的 <code>Node</code> 的指针。</li></ul></li></ul></li><li><p><code>void removeNode(std::shared_ptr&lt;Node&gt; &amp;node)</code></p><ul><li>移除 <code>Node</code>, 内部方法，不应该被外部调用。</li><li>参数: <ul><li><code>node</code>: <code>Node</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Edge&gt; addEdge(std::shared_ptr&lt;Edge&gt; &amp;edge)</code></p><ul><li>使用 <code>Edge</code> 的指针添加 <code>Edge</code>。</li><li>参数: <ul><li><code>edge</code>: <code>Edge</code> 的指针。</li></ul></li><li>返回: <ul><li>添加的 <code>Edge</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Edge&gt; addEdge(std::shared_ptr&lt;Node&gt; &amp;srcNode, std::shared_ptr&lt;Port&gt; &amp;srcPort, std::shared_ptr&lt;Node&gt; &amp;dstNode, std::shared_ptr&lt;Port&gt; &amp;dstPort, std::string name)</code></p><ul><li>使用参数添加 <code>Edge</code>。</li><li>参数: <ul><li><code>srcNode</code>: 起点 <code>Node</code> 的指针。</li><li><code>srcPort</code>: 起点 <code>Port</code> 的指针。</li><li><code>dstNode</code>: 终点 <code>Node</code> 的指针。</li><li><code>dstPort</code>: 终点 <code>Port</code> 的指针。</li><li><code>name</code>: <code>Edge</code> 的名字。</li></ul></li><li>返回: <ul><li>添加的 <code>Edge</code> 的指针。</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Edge&gt; addEdge(int srcNodeId, int srcPortId, int dstNodeId, int dstPortId, std::string name)</code></p><ul><li>使用参数添加 <code>Edge</code>。</li><li>参数: <ul><li><code>srcNodeId</code>: 起点 <code>Node</code> 的 id。</li><li><code>srcPortId</code>: 起点 <code>Port</code> 的 id。</li><li><code>dstNodeId</code>: 终点 <code>Node</code> 的 id。</li><li><code>dstPortId</code>: 终点 <code>Port</code> 的 id。</li><li><code>name</code>: <code>Edge</code> 的名字。</li></ul></li><li>返回: <ul><li>添加的 <code>Edge</code> 的指针。</li></ul></li></ul></li><li><p><code>void removeEdge(std::shared_ptr&lt;Edge&gt; &amp;edge)</code></p><ul><li>删除 <code>Edge</code>, 内部方法，不应该被外部调用。</li><li>参数: <ul><li><code>edge</code>: <code>Edge</code> 的指针。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;getNodes()</code></p><ul><li>获取所有 <code>Node</code>。</li><li>返回: <ul><li>所有 <code>Node</code> 的引用。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Edge&gt;&gt; &amp;getEdges()</code></p><ul><li>获取所有 <code>Edge</code>。</li><li>返回: <ul><li>所有 <code>Edge</code> 的引用。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Layer&gt;&gt; &amp;getLayers()</code></p><ul><li>获取所有 <code>Layer</code>。</li><li>返回: <ul><li>所有 <code>Layer</code> 的引用。</li></ul></li></ul></li><li><p><code>void addLayers(const std::shared_ptr&lt;Layer&gt; &amp;layer)</code></p><ul><li>在当前 <code>layers</code> 数组尾部再添加一层 <code>Layer</code>, 内部方法，不应该被外部调用。</li><li>参数: <ul><li><code>layer</code>: <code>Layer</code> 的指针。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;getLayerlessNodes()</code></p><ul><li>获取当前还没分配层级的 <code>Node</code>，内部方法，不应该被外部调用。</li><li>返回: <ul><li>所有还没分配层级的 <code>Node</code> 的引用。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;getHiddenNodes()</code></p><ul><li>内部方法，不应该被外部调用。</li><li>返回: <ul><li>所有隐藏的 <code>Node</code> 的引用。</li></ul></li></ul></li><li><p><code>void setHiddenNodes(std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;nodes)</code></p><ul><li>内部方法，不应该被外部调用。</li><li>参数: <ul><li><code>nodes</code>: 隐藏的 <code>Node</code> 的引用。</li></ul></li></ul></li><li><p><code>std::vector&lt;std::vector&lt;std::shared_ptr&lt;Node&gt;&gt;&gt; toNodeArray()</code></p><ul><li>获取 <code>Node</code> 从左到右，从上到下的二维数组。</li><li>返回: <ul><li><code>Node</code> 的二维数组。</li></ul></li></ul></li><li><p><code>nlohmann::json json()</code></p><ul><li>以 <code>JSON</code> 形式输出数据。</li><li>返回: <ul><li><code>JSON</code> 数据。</li></ul></li></ul></li></ul><h2 id="layeredengine-h" tabindex="-1">LayeredEngine.h <a class="header-anchor" href="#layeredengine-h" aria-label="Permalink to &quot;LayeredEngine.h&quot;">​</a></h2><h3 id="概述-1" tabindex="-1">概述 <a class="header-anchor" href="#概述-1" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>此文件包含 <code>LayeredEngine</code> 类及其相关结构体的定义，用于符号库数据和布局算法。</p><h3 id="命名空间-1" tabindex="-1">命名空间 <a class="header-anchor" href="#命名空间-1" aria-label="Permalink to &quot;命名空间&quot;">​</a></h3><ul><li><code>gui::protocol</code></li></ul><h3 id="结构体" tabindex="-1">结构体 <a class="header-anchor" href="#结构体" aria-label="Permalink to &quot;结构体&quot;">​</a></h3><h4 id="symbolportitem" tabindex="-1">SymbolPortItem <a class="header-anchor" href="#symbolportitem" aria-label="Permalink to &quot;SymbolPortItem&quot;">​</a></h4><p>符号库数据的端口结构体。</p><h5 id="成员变量" tabindex="-1">成员变量 <a class="header-anchor" href="#成员变量" aria-label="Permalink to &quot;成员变量&quot;">​</a></h5><ul><li><code>std::string name</code><br> 端口名称</li><li><code>float x</code><br> 端口 x 坐标</li><li><code>float y</code><br> 端口 y 坐标</li></ul><h5 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h5><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolPortItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string name, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y);</span></span></code></pre></div><ul><li><code>name</code><br> 端口名称</li><li><code>x</code><br> 端口 x 坐标</li><li><code>y</code><br> 端口 y 坐标</li></ul><h4 id="symbolitem" tabindex="-1">SymbolItem <a class="header-anchor" href="#symbolitem" aria-label="Permalink to &quot;SymbolItem&quot;">​</a></h4><p>符号库数据结构体。</p><h5 id="成员变量-1" tabindex="-1">成员变量 <a class="header-anchor" href="#成员变量-1" aria-label="Permalink to &quot;成员变量&quot;">​</a></h5><ul><li><code>std::string name</code><br> 符号名称</li><li><code>float width</code><br> 符号宽度</li><li><code>float height</code><br> 符号高度</li><li><code>std::vector&lt;SymbolPortItem&gt; ports</code><br> 符号端口列表</li></ul><h5 id="构造函数-1" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数-1" aria-label="Permalink to &quot;构造函数&quot;">​</a></h5><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string name, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height);</span></span></code></pre></div><ul><li><code>name</code><br> 符号名称</li><li><code>width</code><br> 符号宽度</li><li><code>height</code><br> 符号高度</li></ul><h3 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h3><h4 id="layeredengine" tabindex="-1">LayeredEngine <a class="header-anchor" href="#layeredengine" aria-label="Permalink to &quot;LayeredEngine&quot;">​</a></h4><p>算法引擎类。</p><h5 id="成员函数" tabindex="-1">成员函数 <a class="header-anchor" href="#成员函数" aria-label="Permalink to &quot;成员函数&quot;">​</a></h5><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LayeredEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::shared_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Graph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph);</span></span></code></pre></div><ul><li><code>graph</code><br> 图形对象的共享指针</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LayeredEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filesystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path);</span></span></code></pre></div><ul><li><code>path</code><br> 文件路径</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> layered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>启动布局算法。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nlohmann</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filesystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><code>path</code><br> 文件路径</li></ul><p>返回 JSON 数据。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shared_ptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>返回图形对象的共享指针。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSymbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filesystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><code>path</code><br> 文件路径</li></ul><p>返回符号列表。</p><h5 id="成员变量-2" tabindex="-1">成员变量 <a class="header-anchor" href="#成员变量-2" aria-label="Permalink to &quot;成员变量&quot;">​</a></h5><ul><li><code>std::shared_ptr&lt;Graph&gt; graph</code><br> 图形对象的共享指针</li><li><code>std::unordered_map&lt;std::shared_ptr&lt;Node&gt;, int&gt; layer</code><br> 节点层级映射</li></ul>',48)]))}const g=e(t,[["render",s]]);export{k as __pageData,g as default};
