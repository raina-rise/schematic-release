import{_ as i,c as t,o,ag as l}from"./chunks/framework.ifgpkas4.js";const u=JSON.parse('{"title":"API Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"en/api/index.md","filePath":"en/api/index.md"}'),d={name:"en/api/index.md"};function a(s,e,r,n,c,h){return o(),t("div",null,e[0]||(e[0]=[l('<h1 id="api-documentation" tabindex="-1">API Documentation <a class="header-anchor" href="#api-documentation" aria-label="Permalink to &quot;API Documentation&quot;">​</a></h1><h2 id="graph-h" tabindex="-1">Graph.h <a class="header-anchor" href="#graph-h" aria-label="Permalink to &quot;Graph.h&quot;">​</a></h2><h3 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h3><p>The <code>Graph</code> class manages the relationships between nodes and edges, and all operations can be performed based on this class.</p><h3 id="namespace" tabindex="-1">Namespace <a class="header-anchor" href="#namespace" aria-label="Permalink to &quot;Namespace&quot;">​</a></h3><ul><li><code>gui::protocol</code></li></ul><h3 id="public-member-functions" tabindex="-1">Public Member Functions <a class="header-anchor" href="#public-member-functions" aria-label="Permalink to &quot;Public Member Functions&quot;">​</a></h3><ul><li><p><code>Graph()</code></p><ul><li>Constructor.</li></ul></li><li><p><code>std::shared_ptr&lt;NodeProto&gt; addNodeProto(const std::shared_ptr&lt;NodeProto&gt; &amp;nodeProto)</code></p><ul><li>Add <code>NodeProto</code> using a pointer to <code>NodeProto</code>.</li><li>Parameters: <ul><li><code>nodeProto</code>: Pointer to <code>NodeProto</code>.</li></ul></li><li>Returns: <ul><li>Pointer to the added <code>NodeProto</code>.</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;NodeProto&gt; addNodeProto(std::string name, double width, double height, int id)</code></p><ul><li>Add <code>NodeProto</code> using parameters.</li><li>Parameters: <ul><li><code>name</code>: Name of the <code>NodeProto</code>.</li><li><code>width</code>: Width of the <code>NodeProto</code>.</li><li><code>height</code>: Height of the <code>NodeProto</code>.</li><li><code>id</code>: ID of the <code>NodeProto</code>, used to identify <code>NodeProto</code>, must be unique.</li></ul></li><li>Returns: <ul><li>Pointer to the added <code>NodeProto</code>.</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;NodeProto&gt;&gt; &amp;getNodeProtos()</code></p><ul><li>Get all <code>NodeProto</code>.</li><li>Returns: <ul><li>Reference to all <code>NodeProto</code>.</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;NodeProto&gt; getDummyNodeProto()</code></p><ul><li>Get the <code>NodeProto</code> to which the <code>DummyNode</code> belongs, internal method, should not be called externally.</li><li>Returns: <ul><li>Pointer to the <code>NodeProto</code> to which the <code>DummyNode</code> belongs.</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Port&gt; addPort(std::string name, int id, PortType portType, int protoId)</code></p><ul><li>Add <code>Port</code> using parameters.</li><li>Parameters: <ul><li><code>name</code>: Name of the <code>Port</code>.</li><li><code>id</code>: ID of the <code>Port</code>, used to identify <code>Port</code>, must be unique.</li><li><code>portType</code>: Type of the <code>Port</code>, <code>INPUT</code> or <code>OUTPUT</code>.</li><li><code>protoId</code>: ID of the <code>NodeProto</code> to which it belongs.</li></ul></li><li>Returns: <ul><li>Pointer to the added <code>Port</code>.</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Port&gt;&gt; &amp;getPorts()</code></p><ul><li>Get all <code>Port</code>.</li><li>Returns: <ul><li>Reference to all <code>Port</code>.</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Port&gt; getPortById(int id)</code></p><ul><li>Get <code>Port</code> by its ID.</li><li>Parameters: <ul><li><code>id</code>: ID of the <code>Port</code>.</li></ul></li><li>Returns: <ul><li>Pointer to the <code>Port</code> with the corresponding ID.</li></ul></li></ul></li><li><p><code>void updateAllPortPos()</code></p><ul><li>Call the <code>updatePortPos</code> method of all <code>nodeProto</code> to update the relative coordinates of <code>port</code>.</li></ul></li><li><p><code>std::shared_ptr&lt;Node&gt; addNode(const std::shared_ptr&lt;Node&gt; &amp;node)</code></p><ul><li>Add <code>Node</code> using a pointer to <code>Node</code>.</li><li>Parameters: <ul><li><code>node</code>: Pointer to <code>Node</code>.</li></ul></li><li>Returns: <ul><li>Pointer to the added <code>Node</code>.</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Node&gt; addNode(int id, int protoId, std::string name)</code></p><ul><li>Add <code>Node</code> using parameters.</li><li>Parameters: <ul><li><code>id</code>: ID of the <code>node</code>, used to identify <code>Node</code>, must be unique.</li><li><code>protoId</code>: ID of the <code>proto</code> to which the <code>node</code> belongs.</li><li><code>name</code>: Name of the <code>node</code>.</li></ul></li><li>Returns: <ul><li>Pointer to the added <code>Node</code>.</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Node&gt; addNode(int id, int protoId, std::string name, NodeSide side)</code></p><ul><li>Add a fixed-level <code>Node</code> using parameters.</li><li>Parameters: <ul><li><code>id</code>: ID of the <code>node</code>, used to identify <code>Node</code>, must be unique.</li><li><code>protoId</code>: ID of the <code>proto</code> to which the <code>node</code> belongs.</li><li><code>name</code>: Name of the <code>node</code>.</li><li><code>side</code>: Fixed level, can be the first or last level.</li></ul></li><li>Returns: <ul><li>Pointer to the added <code>Node</code>.</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Node&gt; getNodeById(int id)</code></p><ul><li>Get <code>Node</code> by its ID.</li><li>Parameters: <ul><li><code>id</code>: ID of the <code>Node</code>.</li></ul></li><li>Returns: <ul><li>Pointer to the <code>Node</code> with the corresponding ID.</li></ul></li></ul></li><li><p><code>void removeNode(std::shared_ptr&lt;Node&gt; &amp;node)</code></p><ul><li>Remove <code>Node</code>, internal method, should not be called externally.</li><li>Parameters: <ul><li><code>node</code>: Pointer to <code>Node</code>.</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Edge&gt; addEdge(std::shared_ptr&lt;Edge&gt; &amp;edge)</code></p><ul><li>Add <code>Edge</code> using a pointer to <code>Edge</code>.</li><li>Parameters: <ul><li><code>edge</code>: Pointer to <code>Edge</code>.</li></ul></li><li>Returns: <ul><li>Pointer to the added <code>Edge</code>.</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Edge&gt; addEdge(std::shared_ptr&lt;Node&gt; &amp;srcNode, std::shared_ptr&lt;Port&gt; &amp;srcPort, std::shared_ptr&lt;Node&gt; &amp;dstNode, std::shared_ptr&lt;Port&gt; &amp;dstPort, std::string name)</code></p><ul><li>Add <code>Edge</code> using parameters.</li><li>Parameters: <ul><li><code>srcNode</code>: Pointer to the source <code>Node</code>.</li><li><code>srcPort</code>: Pointer to the source <code>Port</code>.</li><li><code>dstNode</code>: Pointer to the destination <code>Node</code>.</li><li><code>dstPort</code>: Pointer to the destination <code>Port</code>.</li><li><code>name</code>: Name of the <code>Edge</code>.</li></ul></li><li>Returns: <ul><li>Pointer to the added <code>Edge</code>.</li></ul></li></ul></li><li><p><code>std::shared_ptr&lt;Edge&gt; addEdge(int srcNodeId, int srcPortId, int dstNodeId, int dstPortId, std::string name)</code></p><ul><li>Add <code>Edge</code> using parameters.</li><li>Parameters: <ul><li><code>srcNodeId</code>: ID of the source <code>Node</code>.</li><li><code>srcPortId</code>: ID of the source <code>Port</code>.</li><li><code>dstNodeId</code>: ID of the destination <code>Node</code>.</li><li><code>dstPortId</code>: ID of the destination <code>Port</code>.</li><li><code>name</code>: Name of the <code>Edge</code>.</li></ul></li><li>Returns: <ul><li>Pointer to the added <code>Edge</code>.</li></ul></li></ul></li><li><p><code>void removeEdge(std::shared_ptr&lt;Edge&gt; &amp;edge)</code></p><ul><li>Remove <code>Edge</code>, internal method, should not be called externally.</li><li>Parameters: <ul><li><code>edge</code>: Pointer to <code>Edge</code>.</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;getNodes()</code></p><ul><li>Get all <code>Node</code>.</li><li>Returns: <ul><li>Reference to all <code>Node</code>.</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Edge&gt;&gt; &amp;getEdges()</code></p><ul><li>Get all <code>Edge</code>.</li><li>Returns: <ul><li>Reference to all <code>Edge</code>.</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Layer&gt;&gt; &amp;getLayers()</code></p><ul><li>Get all <code>Layer</code>.</li><li>Returns: <ul><li>Reference to all <code>Layer</code>.</li></ul></li></ul></li><li><p><code>void addLayers(const std::shared_ptr&lt;Layer&gt; &amp;layer)</code></p><ul><li>Add a <code>Layer</code> to the end of the current <code>layers</code> array, internal method, should not be called externally.</li><li>Parameters: <ul><li><code>layer</code>: Pointer to <code>Layer</code>.</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;getLayerlessNodes()</code></p><ul><li>Get <code>Node</code> that have not yet been assigned a level, internal method, should not be called externally.</li><li>Returns: <ul><li>Reference to all <code>Node</code> that have not yet been assigned a level.</li></ul></li></ul></li><li><p><code>std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;getHiddenNodes()</code></p><ul><li>Internal method, should not be called externally.</li><li>Returns: <ul><li>Reference to all hidden <code>Node</code>.</li></ul></li></ul></li><li><p><code>void setHiddenNodes(std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; &amp;nodes)</code></p><ul><li>Internal method, should not be called externally.</li><li>Parameters: <ul><li><code>nodes</code>: Reference to hidden <code>Node</code>.</li></ul></li></ul></li><li><p><code>std::vector&lt;std::vector&lt;std::shared_ptr&lt;Node&gt;&gt;&gt; toNodeArray()</code></p><ul><li>Get a 2D array of <code>Node</code> from left to right, top to bottom.</li><li>Returns: <ul><li>2D array of <code>Node</code>.</li></ul></li></ul></li><li><p><code>nlohmann::json json()</code></p><ul><li>Output data in <code>JSON</code> format.</li><li>Returns: <ul><li><code>JSON</code> data.</li></ul></li></ul></li></ul><h2 id="layeredengine-h" tabindex="-1">LayeredEngine.h <a class="header-anchor" href="#layeredengine-h" aria-label="Permalink to &quot;LayeredEngine.h&quot;">​</a></h2><h3 id="overview-1" tabindex="-1">Overview <a class="header-anchor" href="#overview-1" aria-label="Permalink to &quot;Overview&quot;">​</a></h3><p>This file contains the definition of the <code>LayeredEngine</code> class and its related structures, used for symbol library data and layout algorithms.</p><h3 id="namespace-1" tabindex="-1">Namespace <a class="header-anchor" href="#namespace-1" aria-label="Permalink to &quot;Namespace&quot;">​</a></h3><ul><li><code>gui::protocol</code></li></ul><h3 id="structs" tabindex="-1">Structs <a class="header-anchor" href="#structs" aria-label="Permalink to &quot;Structs&quot;">​</a></h3><h4 id="symbolportitem" tabindex="-1">SymbolPortItem <a class="header-anchor" href="#symbolportitem" aria-label="Permalink to &quot;SymbolPortItem&quot;">​</a></h4><p>Port structure of the symbol library data.</p><h5 id="member-variables" tabindex="-1">Member Variables <a class="header-anchor" href="#member-variables" aria-label="Permalink to &quot;Member Variables&quot;">​</a></h5><ul><li><code>std::string name</code><br> Port name</li><li><code>float x</code><br> Port x coordinate</li><li><code>float y</code><br> Port y coordinate</li></ul><h5 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h5><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolPortItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string name, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y);</span></span></code></pre></div><ul><li><code>name</code><br> Port name</li><li><code>x</code><br> Port x coordinate</li><li><code>y</code><br> Port y coordinate</li></ul><h4 id="symbolitem" tabindex="-1">SymbolItem <a class="header-anchor" href="#symbolitem" aria-label="Permalink to &quot;SymbolItem&quot;">​</a></h4><p>Symbol library data structure.</p><h5 id="member-variables-1" tabindex="-1">Member Variables <a class="header-anchor" href="#member-variables-1" aria-label="Permalink to &quot;Member Variables&quot;">​</a></h5><ul><li><code>std::string name</code><br> Symbol name</li><li><code>float width</code><br> Symbol width</li><li><code>float height</code><br> Symbol height</li><li><code>std::vector&lt;SymbolPortItem&gt; ports</code><br> List of symbol ports</li></ul><h5 id="constructor-1" tabindex="-1">Constructor <a class="header-anchor" href="#constructor-1" aria-label="Permalink to &quot;Constructor&quot;">​</a></h5><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::string name, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height);</span></span></code></pre></div><ul><li><code>name</code><br> Symbol name</li><li><code>width</code><br> Symbol width</li><li><code>height</code><br> Symbol height</li></ul><h3 id="class" tabindex="-1">Class <a class="header-anchor" href="#class" aria-label="Permalink to &quot;Class&quot;">​</a></h3><h4 id="layeredengine" tabindex="-1">LayeredEngine <a class="header-anchor" href="#layeredengine" aria-label="Permalink to &quot;LayeredEngine&quot;">​</a></h4><p>Algorithm engine class.</p><h5 id="member-functions" tabindex="-1">Member Functions <a class="header-anchor" href="#member-functions" aria-label="Permalink to &quot;Member Functions&quot;">​</a></h5><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LayeredEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::shared_ptr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Graph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph);</span></span></code></pre></div><ul><li><code>graph</code><br> Shared pointer to the graph object</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LayeredEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filesystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path);</span></span></code></pre></div><ul><li><code>path</code><br> File path</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> layered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Start the layout algorithm.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nlohmann</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filesystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><code>path</code><br> File path</li></ul><p>Return JSON data.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shared_ptr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Graph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Return a shared pointer to the graph object.</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSymbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filesystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li><code>path</code><br> File path</li></ul><p>Return a list of symbols.</p><h5 id="member-variables-2" tabindex="-1">Member Variables <a class="header-anchor" href="#member-variables-2" aria-label="Permalink to &quot;Member Variables&quot;">​</a></h5><ul><li><code>std::shared_ptr&lt;Graph&gt; graph</code><br> Shared pointer to the graph object</li><li><code>std::unordered_map&lt;std::shared_ptr&lt;Node&gt;, int&gt; layer</code><br> Node layer mapping</li></ul>',48)]))}const k=i(d,[["render",a]]);export{u as __pageData,k as default};
